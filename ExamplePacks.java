package dz.medbenchohra.sudolver;

public class ExamplePacks {

    public static class EasyPack {

        static int[][][] puzzles = new int[][][]{   // 0 means blank cell
                {
                                    /* --- Puzzle 00 --- */

                        {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 01 --- */

                        {0, 0, 4, 0, 8, 0, 3, 0, 0}
                        , {0, 0, 0, 0, 0, 3, 0, 4, 2}
                        , {8, 0, 0, 4, 0, 5, 9, 0, 7}

                        , {3, 0, 2, 0, 7, 0, 5, 0, 8}
                        , {0, 5, 0, 0, 0, 0, 0, 7, 0}
                        , {6, 0, 8, 0, 9, 0, 2, 0, 1}

                        , {4, 0, 6, 2, 0, 7, 0, 0, 9}
                        , {5, 2, 0, 9, 0, 0, 0, 0, 0}
                        , {0, 0, 7, 0, 1, 0, 4, 0, 0}
                },

                {
                                    /* --- Puzzle 02 --- */

                        {0, 1, 0, 7, 0, 6, 0, 5, 9}
                        , {6, 0, 0, 3, 0, 9, 2, 0, 1}
                        , {0, 0, 0, 0, 2, 0, 7, 0, 0}

                        , {1, 0, 0, 0, 0, 0, 8, 0, 7}
                        , {0, 6, 0, 5, 0, 8, 0, 4, 0}
                        , {2, 0, 3, 0, 0, 0, 0, 0, 5}

                        , {0, 0, 1, 0, 5, 0, 0, 0, 0}
                        , {5, 0, 7, 6, 0, 4, 0, 0, 8}
                        , {8, 3, 0, 2, 0, 7, 0, 1, 0}
                },

                {
                                    /* --- Puzzle 03 --- */

                        {0, 1, 0, 0, 0, 5, 0, 0, 4}
                        , {0, 0, 0, 0, 9, 8, 0, 5, 0}
                        , {8, 0, 5, 0, 7, 0, 1, 0, 3}

                        , {0, 4, 0, 0, 5, 0, 0, 8, 1}
                        , {2, 0, 8, 0, 6, 0, 4, 0, 9}
                        , {1, 7, 0, 0, 2, 0, 0, 6, 0}

                        , {5, 0, 2, 0, 4, 0, 9, 0, 7}
                        , {0, 6, 0, 9, 8, 0, 0, 0, 0}
                        , {9, 0, 0, 5, 0, 0, 0, 4, 0}
                }
        };

        public static int[][] getPuzzle(int i) {
            if (i <= 0) {
                System.out.println("indexing starts from 1");
                return puzzles[0];
            }
            return puzzles[i];
        }
    }

    public static class MediumPack {

        static int[][][] puzzles = new int[][][]{   // 0 means blank cell
                {
                                    /* --- Puzzle 00 --- */

                        {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 01 --- */

                        {0, 0, 0, 0, 9, 7, 0, 0, 6}
                        , {5, 0, 0, 2, 0, 0, 1, 0, 4}
                        , {3, 0, 0, 0, 0, 1, 0, 7, 0}

                        , {0, 9, 3, 8, 0, 5, 0, 0, 7}
                        , {0, 0, 0, 0, 1, 0, 0, 0, 0}
                        , {4, 0, 0, 7, 0, 6, 5, 9, 0}

                        , {0, 4, 0, 1, 0, 0, 0, 0, 9}
                        , {8, 0, 2, 0, 0, 9, 0, 0, 1}
                        , {9, 0, 0, 6, 4, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 02 --- */

                        {2, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 03 --- */

                        {3, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                }
        };

        public static int[][] getPuzzle(int i) {
            if (i <= 0) {
                System.out.println("indexing starts from 1");
                return puzzles[0];
            }
            return puzzles[i];
        }
    }

    public static class HardPack {

        static int[][][] puzzles = new int[][][]{   // 0 means blank cell
                {
                                    /* --- Puzzle 00 --- */

                        {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 01 --- */

                        {1, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 02 --- */

                        {2, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 03 --- */

                        {3, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                }
        };

        public static int[][] getPuzzle(int i) {
            if (i <= 0) {
                System.out.println("indexing starts from 1");
                return puzzles[0];
            }
            return puzzles[i];
        }
    }

    public static class EvilPack {

        static int[][][] puzzles = new int[][][]{   // 0 means blank cell
                {
                                    /* --- Puzzle 00 --- */

                        {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 01 --- */

                        {1, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 02 --- */

                        {2, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                },

                {
                                    /* --- Puzzle 03 --- */

                        {3, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}

                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                        , {0, 0, 0, 0, 0, 0, 0, 0, 0}
                }
        };

        public static int[][] getPuzzle(int i) {
            if (i <= 0) {
                System.out.println("indexing starts from 1");
                return puzzles[0];
            }
            return puzzles[i];
        }
    }


}
